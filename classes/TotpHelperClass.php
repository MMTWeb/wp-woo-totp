<?php 
/**
 * This plugin helper utilizes the following static functions:
 *  TOTP Verification session, QR code generation, TOTP secret generation and all callback page notifications.
 * @package WP-WOO-TOTP
 */

namespace WpWooTotp\Classes;

use Otp\Otp;
use ParagonIE\ConstantTime\Encoding;
use chillerlan\QRCode\QRCode;
use chillerlan\QRCode\QROptions;

class TotpHelperClass
{

    /**
    * Pending totp sessions init
    **/
    public static function setUserIdSession($userID)
    {

        session_unset();
        session_destroy();

        if(!session_id()) {
            session_start();
        }

        $_SESSION['pending_totp'] =  $userID;

    }

    /**
    * Return qrCode from chillerlan app to allow user to add totp authentification on his app
    **/
    public static function totpQrCode($secret,$issuer,$user) 
    {
        $secret = $secret;
        $issuer = $issuer;
        $user = $user; 

        $url = "otpauth://totp/{$issuer}:{$user}?secret={$secret}&issuer={$issuer}";

        $options = new QROptions([
            'outputType' => QRCode::OUTPUT_IMAGE_PNG,
            'eccLevel'   => QRCode::ECC_L,
            'scale'      => 5,
        ]);

        $base64 = (new QRCode($options))->render($url);

        return $base64;

    }

    /**
    * Generate totp secret key from Otp librarie
    **/
    public static function totpGenerateSecret()
    {

        $secret = \Otp\GoogleAuthenticator::generateRandom();
        return $secret;

    }

    /**
    * Verification that the provided code matches the private key
    **/
    public static function totpCodeVerification($secret,$verificationCode)
    {   
        $otp = new Otp();

        if($otp->checkTotp(Encoding::base32DecodeUpper($secret), $verificationCode)) {
            return true;
        }else{
            return false;
        }

    }

    /**
    * prepare page callback notifications url
    **/
    public static function notificationRedirection($type,$status)
    {

        $redirect_url = wp_get_referer() ?: home_url();
        wp_safe_redirect(add_query_arg($type, $status, $redirect_url));
        exit;

    }

    /**
    * output page callback notifications
    **/
    public static function notificationOutput($status)
    {

        if($status === 'activation_success'){
            echo '<div class="notification success"><strong>Two-Factor Authentication (2FA) Activated Successfully!</strong><p>You can now use your authenticator app to secure your account.</p></div>';
        }elseif($status === 'activation_failed'){
            echo '<div class="notification failure"><strong>Activation Failed:</strong> The verification code you entered was incorrect. Ensure you are using the correct code generated by your authenticator app.</div>';
        }elseif($status === 'activation_failed_wrong_code'){
            echo '  <div class="notification failure"><strong>Invalid Verification Code.</strong> Please double-check your code and try again.</div>';
        }elseif($status === 'deactivation_success'){
            echo '<div class="notification success"><strong>Two-Factor Authentication (2FA) Deactivated Successfully!</strong></div>';
        }elseif($status === 'deactivation_failed'){
            echo '<div class="notification failure"><strong>Deactivation Failed:</strong> We were unable to complete the process. Please ensure you are using the correct verification code and try again.</div>';
        }elseif($status === 'deactivation_failed_wrong_code'){
            echo '<div class="notification failure"><strong>Invalid Verification Code.</strong> Please double-check your code and try again.</div>';
        }

    }


}